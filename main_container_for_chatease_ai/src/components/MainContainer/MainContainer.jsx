import React, { useState } from 'react';
import './MainContainer.css';
import ConversationList from '../ConversationList/ConversationList';
import ChatMessage from '../ChatMessage/ChatMessage';
import ChatInput from '../ChatInput/ChatInput';

/**
 * MainContainer - The primary container component for ChatEase AI
 * 
 * This component serves as the structural foundation for the chat application,
 * organizing the layout for conversations, message display, and user input.
 */
const MainContainer = () => {
  // Sample conversation data
  const [conversations] = useState([
    { id: 1, title: 'General Assistant', preview: 'How can I help you today?' },
    { id: 2, title: 'Code Helper', preview: 'Let me help with that code...' },
    { id: 3, title: 'Creative Writing', preview: 'Here\'s a story idea for you...' }
  ]);
  
  // State for active conversation
  const [activeConversationId, setActiveConversationId] = useState(1);
  
  // Sample messages for the current conversation
  const [messages, setMessages] = useState([
    { id: 1, type: 'ai', content: 'Hello! I\'m ChatEase AI, your helpful assistant. How can I help you today?', avatar: 'AI' },
    { id: 2, type: 'user', content: 'Can you tell me more about how you can assist me with my tasks?', avatar: 'You' },
    { id: 3, type: 'ai', content: (
      <>
        <p>Of course! I can help you with a variety of tasks including:</p>
        <ul>
          <li>Answering questions on various topics</li>
          <li>Assisting with writing and content creation</li>
          <li>Helping solve problems and brainstorming ideas</li>
          <li>Providing explanations on complex topics</li>
          <li>Organizing information and creating summaries</li>
        </ul>
        <p>Feel free to ask anything, and I'll do my best to assist you!</p>
      </>
    ), avatar: 'AI' }
  ]);
  
  // Handle sending a new message
  const handleSendMessage = (message) => {
    // Add user message
    const newUserMessage = {
      id: messages.length + 1,
      type: 'user',
      content: message,
      avatar: 'You'
    };
    
    setMessages([...messages, newUserMessage]);
    
    // In a real app, you would send the message to an API here
    // and handle the response
    
    // For now, simulate an AI response after a short delay
    setTimeout(() => {
      const aiResponse = {
        id: messages.length + 2,
        type: 'ai',
        content: `I received your message: "${message}". This is a placeholder response. In a complete implementation, this would be generated by an AI model.`,
        avatar: 'AI'
      };
      
      setMessages(prevMessages => [...prevMessages, aiResponse]);
    }, 1000);
  };
  
  // Find the active conversation
  const activeConversation = conversations.find(c => c.id === activeConversationId) || conversations[0];
  
  // Handle starting a new chat
  const handleNewChat = () => {
    // In a real app, you would create a new conversation in the backend
    console.log('New chat button clicked');
    // For now, just log the action
  };
  
  return (
    <div className="chat-container">
      <ConversationList 
        conversations={conversations}
        activeConversationId={activeConversationId}
        onSelectConversation={setActiveConversationId}
        onNewChat={handleNewChat}
      />

      <div className="chat-main">
        <div className="chat-header">
          <h2>{activeConversation.title}</h2>
          <div className="chat-actions">
            <button className="action-btn">
              <span className="action-icon">⚙️</span>
            </button>
          </div>
        </div>
        
        <div className="messages-container">
          {messages.map(message => (
            <ChatMessage 
              key={message.id}
              type={message.type}
              content={message.content}
              avatar={message.avatar}
            />
          ))}
        </div>
        
        <ChatInput onSendMessage={handleSendMessage} />
      </div>
    </div>
  );
};

export default MainContainer;
